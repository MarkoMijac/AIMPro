'''import torch
import torch.nn as nn
import torch.optim as optim
import numpy as np
import onnx

# Define the neural network
class WeightCorrectionModel(nn.Module):
    def __init__(self):
        super(WeightCorrectionModel, self).__init__()
        self.fc1 = nn.Linear(3, 8)  # 3 input features -> 8 neurons
        self.fc2 = nn.Linear(8, 8)  # Hidden layer
        self.fc3 = nn.Linear(8, 1)  # 1 output (corrected weight)
        self.relu = nn.ReLU()

    def forward(self, x):
        x = self.relu(self.fc1(x))
        x = self.relu(self.fc2(x))
        x = self.fc3(x)  # No activation in output layer (regression task)
        return x

# Create the model
model = WeightCorrectionModel()

# Generate some synthetic data for training
np.random.seed(42)
torch.manual_seed(42)

# Simulated training data: measured weight, vibration rate, incline angle
X_train = torch.tensor(np.random.rand(100, 3) * [50, 5, 10], dtype=torch.float32)
# Simulated "corrected weight" based on a fake function
Y_train = X_train[:, 0] - (X_train[:, 1] * 0.5) - (X_train[:, 2] * 0.2)

# Define loss and optimizer
criterion = nn.MSELoss()
optimizer = optim.Adam(model.parameters(), lr=0.01)

# Train the model
for epoch in range(1000):
    optimizer.zero_grad()
    predictions = model(X_train)
    loss = criterion(predictions.squeeze(), Y_train)
    loss.backward()
    optimizer.step()

print("Training complete. Final Loss:", loss.item())


# ==== EXPORT TO ONNX ====
onnx_path = "weight_correction.onnx"

# Dummy input for ONNX export
dummy_input = torch.tensor([[20.0, 1.2, 3.5]], dtype=torch.float32)

# Export the model
torch.onnx.export(model, dummy_input, onnx_path,
                  input_names=["measured_weight", "vibration_rate", "incline_angle"],
                  output_names=["corrected_weight"])

print(f"ONNX model saved to {onnx_path}")
'''